### Consensus Transcriptomic Subtypes of Sepsis R script - Scicluna

library(mixOmics)
library(limma)
library(sva)
library(pheatmap)
library(RColorBrewer)
library(MCL)
library(jaccard)
library(cluster)
library(ggplot2)
library(effects)
library(rcompanion)
library(twang)

### MARS, GAinS and Stanford subtype assignments binary heatmap
dat.1 <- read.csv("Mars_SRS_Stanford_assigned.csv", row.names=1, stringsAsFactors=TRUE)
dat.1m <- data.matrix(dat.1)
png("binary_heatmap_consensus_overlap.png",height=600,width=2000,res=300)
pheatmap(t(dat.1m), 
         cluster_rows = FALSE, 
         cluster_cols = TRUE,  # clustering on columns unless you want it
         color = c("lightgrey", "midnightblue"),  # White for 0, Blue for 1
         labels_row = colnames(dat.1m),
         labels_col = " ",
         display_numbers = FALSE, 
         fontsize = 10,
         fontsize_row = 8,
         fontsize_col = 10,
         clustering_distance_rows = "binary",
         legend = FALSE,
         treeheight_row = 0)
dev.off()

### MCL clustering of jaccard distances
dat.mcl <- read.table("mcl_jac_dist.txt",header=T)
mcl.1 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=1)
mcl.2 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=2)
mcl.3 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=3)
mcl.4 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=4)
mcl.5 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=5)
mcl.6 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=6)
mcl.7 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=7)
mcl.8 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=8)
mcl.9 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=9)
mcl.10 <- mcl(x=dat.mcl, addLoops=T, allow1=F, inflation=10)

### core samples classifier and random forest
exp.core.df <- read.csv("exp.core.df.txt", row.names=1, sep="", stringsAsFactors=TRUE)
exp.core.m <- data.matrix(exp.core.df)
core.cts <- read.csv("coreSamples_CTS_markup.csv", stringsAsFactors=TRUE)
cts <- as.factor(core.cts$CTS)
rf <- randomForest(cts~., data=t(exp.c.core), proximity=TRUE) 
print(rf)

#Call:
# randomForest(formula = cts ~ ., data = t(exp.core.m), proximity = TRUE) 
#               Type of random forest: classification
#                     Number of trees: 500
#No. of variables tried at each split: 4
#
#        OOB estimate of  error rate: 2.17%
#Confusion matrix:
#    1  2   3 class.error
#1 214  0   1 0.004651163
#2   2 77   2 0.049382716
#3   1  4 159 0.030487805

proximity_matrix <- rf$proximity
distance_rf <- as.dist(1 - proximity_matrix)
sil=silhouette(as.numeric(cts),dist=distance_rf) # silhouette function

pdf("silhouettes_COREsamples.pdf")
plot(sil,col=c("royalblue", "#B2DF8A", "orange"))
dev.off()

### Jaccard distances used as input in Cytoscape together with prevalence of each (node size)

### Gene classifier heatmap

p.1 <- read.csv("CTS_assignments.csv", row.names=1, stringsAsFactors=TRUE)
exp.c <- read.delim("exp.c.txt", row.names=1, stringsAsFactors=TRUE)
exp.c.m <- data.matrix(exp.c)
ann_colors <- list(CTS=c("1"="royalblue", "2"="#B2DF8A", "3"="orange"))
#
png("CTS_Heatmap.png",height=1800,width=2600,res=300)
pheatmap(exp.c.m, color = colorRampPalette(rev(brewer.pal(n = 11, name = "PuOr")))(50), clustering_distance_rows = "correlation", cluster_rows = TRUE, cluster_cols = F, show_rownames = T, 
         show_colnames = F, annotation_legend = F, annotation_col = p.1, annotation_colors = ann_colors, scale="row", treeheight_row = 0)
dev.off()
#


###
### CTS and VANISH clinical associations for Placebo or Hydrocortisone treated only
###

# Assign VANISH samples to CTS after co-normalization using combat

exp.vanish.class <- read.csv("exp.vanish.class.txt", row.names=1, sep="", stringsAsFactors=TRUE)
pred_van <- predict(rf, t(exp.vanish.class), type = "prob") # combine with clinical data from the VANISH study and select placebo or hydrocortisone for further analysis

p3.2 <- read.csv("VANISH_CTS_assignments.csv", stringsAsFactors=TRUE)

p3.2.cts1 <- subset(p3.2,p3.2$CTS_pred=="1")
p3.2.cts2 <- subset(p3.2,p3.2$CTS_pred=="2")
p3.2.cts3 <- subset(p3.2,p3.2$CTS_pred=="3")

t.v.1 <- table(p3.2.cts1$drug2,p3.2.cts1$outcome.day28)
t.v.1

t.v.2 <- table(p3.2.cts2$drug2,p3.2.cts2$outcome.day28)
t.v.2

t.v.3 <- table(p3.2.cts3$drug2,p3.2.cts3$outcome.day28)
t.v.3

png("VANISH_CTS1_hydro.png",height=1300,width=800,res=300)
barplot(t(t.v.1),col=c("grey","#FF3333"),ylim=c(0,30))
dev.off()

png("VANISH_CTS2_hydro.png",height=1300,width=800,res=300)
barplot(t(t.v.2),col=c("grey","#FF3333"),ylim=c(0,30))
dev.off()

png("VANISH_CTS3_hydro.png",height=1300,width=800,res=300)
barplot(t(t.v.3),col=c("grey","#FF3333"),ylim=c(0,30))
dev.off()

# Fit an interaction model on the matched dataset
model <- glm(outcome.day28 ~ drug2 * CTS_pred, data = p3.2, family = binomial)

# Summarize the model to examine the interaction effect
model_summary <- summary(model)

# Extract coefficients
coefs <- model_summary$coefficients

# Calculate odds ratios
odds_ratios <- exp(coefs[, "Estimate"])

# Calculate 95% confidence intervals
ci_lower <- exp(coefs[, "Estimate"] - 1.96 * coefs[, "Std. Error"])
ci_upper <- exp(coefs[, "Estimate"] + 1.96 * coefs[, "Std. Error"])

# Combine results into a data frame
results <- data.frame(
  OR = odds_ratios,
  CI_lower = ci_lower,
  CI_upper = ci_upper
)

print(results)

#                                  OR   CI_lower   CI_upper
#(Intercept)                 0.3125000 0.11448045  0.8530386
#drug2Placebo                1.2000000 0.30361078  4.7429145
#as.factor(p2)2              5.7600000 1.30537527 25.4161396
#as.factor(p2)3              1.7066667 0.45550973  6.3943993
#drug2Placebo:as.factor(p2)2 0.3086420 0.03543801  2.6880707
#drug2Placebo:as.factor(p2)3 0.3551136 0.05370550  2.3480967

effect_plot <- allEffects(model)

# Plot the effects, including the interaction
plot(effect_plot, multiline = TRUE, ci.style = "bands", main = "Interaction Effect Plot")

# Create new data for predictions
new_data <- expand.grid(
  drug2 = c("Hydrocortisone", "Placebo"), # Replace with actual levels
  CTS_pred = factor(c(1, 2, 3)) 
)

# Add predicted probabilities
new_data$predicted_prob <- predict(model, new_data, type = "response")

png("VANISH_CTS_probabilitiesInteraction.png",height=1500,width=2000,res=300)
gg <- ggplot(new_data, aes(x = CTS_pred, y = predicted_prob, color = drug2, group = drug2)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(
    title = "Predicted Probabilities with Interaction",
    x = "CTS_pred Levels",
    y = "Predicted Probability",
    color = "Drug Group"
  ) +
  theme_classic()
plot(gg)
dev.off()

# Generate predictions with confidence intervals
predictions <- predict(model, new_data, type = "link", se.fit = TRUE)
new_data$predicted_prob <- plogis(predictions$fit)
new_data$lower <- plogis(predictions$fit - 1.96 * predictions$se.fit)
new_data$upper <- plogis(predictions$fit + 1.96 * predictions$se.fit)

# Plot with ggplot2
png("VANISH_CTS_probabilitiesInteraction.png",height=1500,width=2000,res=300)
ggplot(new_data, aes(x = CTS_pred, y = predicted_prob, color = drug2, group = drug2)) +
  geom_line(size = 1.2) +                     # Plot lines for predictions
  geom_point(size = 3) +                      # Plot points for predictions
  geom_ribbon(aes(ymin = lower, ymax = upper, fill = drug2), 
              alpha = 0.2, linetype = 0) +    # Add custom shading for CIs
  scale_fill_manual(values = c("Placebo" = "#99CCFF",  # Custom color for Placebo
                               "Hydrocortisone" = "#FF9999")) +  # Custom color for reference drug
  scale_color_manual(values = c("Placebo" = "#3366CC",  # Matching line color
                                "Hydrocortisone" = "#FF3333")) +  # Matching line color
  labs(
    title = "Predicted Probabilities with Custom CI Colors",
    x = "CTS_pred Levels",
    y = "Predicted Probability",
    color = "Drug Group",
    fill = "Drug Group"
  ) +
  theme_classic() +
  theme(
    axis.text = element_text(size = 14),   # Increase axis text size
    axis.title = element_text(size = 16),  # Increase axis title size
    legend.text = element_text(size = 12), # Increase legend text size
    legend.title = element_text(size = 14) # Increase legend title size
  )
dev.off()


####
#### CTS association to clinical data MARS and GAINS
####

c.1 <- read.csv("CTS_assigned_MARS_GAinS_ClinicalData.csv", stringsAsFactors=TRUE)
c.1$CTS <- as.factor(c.1$CTS)

head(c.1)
table(c.1$study)
# gains  mars 
# 444   678 
mars.c <- subset(c.1,c.1$study=="mars")
dunn.test(mars.c$Peak_SOFA,mars.c$CTS)

gains.c <- subset(c.1,c.1$study=="gains")
dunn.test(gains.c$Peak_SOFA,gains.c$CTS)
t.m <- table(mars.c$CTS,mars.c$death_in_ICU)
chisq.test(t.m)

png("Death_in_ICU_barplot_MARS.png",height=1500,width=1000,res=300)
barplot(t(t.m),ylim=c(0,400),col=c("grey","darkred"))
dev.off()

t.g <- table(gains.c$CTS,gains.c$death_in_ICU)
chisq.test(t.g)

png("Death_in_ICU_barplot_GAINS.png",height=1500,width=1000,res=300)
barplot(t(t.g),ylim=c(0,400),col=c("grey","darkred"))
dev.off()

t <- table(c.1$CTS,c.1$death_in_ICU)
chisq.test(t)

t.3 <- table(c.1$pneumonia,c.1$CTS)
chisq.test(t.3)

t.4 <- table(c.1$abdo,c.1$CTS)
chisq.test(t.4)

png("Death_in_ICU_barplot_ALL.png",height=1500,width=1000,res=300)
barplot(t(t),ylim=c(0,700),col=c("grey","darkred"))
dev.off()

png("Pneumonia_barplot_ALL.png",height=1500,width=1000,res=300)
barplot(t.3,ylim=c(0,700),col=c("grey","steelblue"))
dev.off()

png("Abdo_barplot_ALL.png",height=1500,width=1000,res=300)
barplot(t.4,ylim=c(0,700),col=c("grey","steelblue"))
dev.off()

png("SOFA_Violin_ALL.png",height=800,width=1000,res=300)
p <- ggplot(c.1, aes(x=as.factor(CTS), y=Peak_SOFA, fill=CTS)) +
  geom_violin(trim=FALSE)+
  scale_fill_manual(values=c("royalblue","#B2DF8A","orange"))+
  geom_boxplot(width=0.1)+
  ylim(0,30)+
  theme_classic()
p
dev.off()

png("SOFA_Violin_MARS.png",height=800,width=1000,res=300)
p <- ggplot(mars.c, aes(x=as.factor(CTS), y=Peak_SOFA, fill=CTS)) +
  geom_violin(trim=FALSE)+
  scale_fill_manual(values=c("royalblue","#B2DF8A","orange"))+
  geom_boxplot(width=0.1)+
  ylim(0,30)+
  theme_classic()
p
dev.off()

png("SOFA_Violin_GAINS.png",height=800,width=1000,res=300)
p <- ggplot(gains.c, aes(x=as.factor(CTS), y=Peak_SOFA, fill=CTS)) +
  geom_violin(trim=FALSE)+
  scale_fill_manual(values=c("royalblue","#B2DF8A","orange"))+
  geom_boxplot(width=0.1)+
  ylim(0,30)+
  theme_classic()
p
dev.off()

#####
##### corticosteroids and MARS CTS
#####

MARS_cortico <- read.csv("MARS_cortico.csv", stringsAsFactors=TRUE)

t.cor <- table(MARS_cortico$CTS,MARS_cortico$cortico_use)

t.cor
#       0   1
#   1 100 160
#   2  65 110
#   3 151  92


png("cortico_barplot_Mars_CTS.png",height=1500,width=1000,res=300)
barplot(t(t.cor),ylim=c(0,400),col=c("grey","midnightblue"))
dev.off()

pairwiseNominalIndependence(t.cor, fisher = TRUE, gtest = TRUE, method = "BH")
#   Comparison p.Fisher p.adj.Fisher  p.Gtest p.adj.Gtest  p.Chisq p.adj.Chisq
#1      1 : 2 8.40e-01     8.40e-01 7.81e-01    7.81e-01 7.81e-01    7.81e-01
#2      1 : 3 1.27e-07     3.81e-07 9.67e-08    2.90e-07 1.11e-07    3.33e-07
#3      2 : 3 6.17e-07     9.26e-07 3.98e-07    5.97e-07 4.53e-07    6.80e-07

chisq.test(t.cor,simulate.p.value = T)
# 	Pearson's Chi-squared test with simulated p-value (based on 2000 replicates)
#
#data:  t.cor
#X-squared = 36.791, df = NA, p-value = 0.0004998


####
#### GSEA was performed together with AUcell analysis of scRNA-seq data from the sepsis blood single cell atlas (Kwok et al)
####


